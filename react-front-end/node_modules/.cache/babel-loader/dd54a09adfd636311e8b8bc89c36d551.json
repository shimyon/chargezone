{"ast":null,"code":"import _objectSpread from\"D:\\\\Shimyon\\\\Emoiss\\\\RiteshBhai\\\\cdzb\\\\chargezone\\\\react-front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"D:\\\\Shimyon\\\\Emoiss\\\\RiteshBhai\\\\cdzb\\\\chargezone\\\\react-front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";/* eslint-disable no-unused-vars */ /* eslint-disable no-underscore-dangle */ /* eslint-disable no-param-reassign */import React,{useEffect,useRef,useState}from'react';import{Chart}from'chart.js';import{smallLineChartOptions}from'./config';const addCommas=nStr=>{nStr+='';const x=nStr.split('.');let x1=x[0];const x2=x.length>1?\".\".concat(x[1]):'';const rgx=/(\\d+)(\\d{3})/;while(rgx.test(x1)){x1=x1.replace(rgx,'$1,$2');}return x1+x2;};const Scatter=({data})=>{const chartContainer=useRef(null);const _useState=useState(null),_useState2=_slicedToArray(_useState,2),setChartInstance=_useState2[1];const _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),currentValue=_useState4[0],setCurrentValue=_useState4[1];const _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),currentLabel=_useState6[0],setCurrentLabel=_useState6[1];const changeState=(yLabel,xLabel)=>{setCurrentValue(yLabel);setCurrentLabel(xLabel);};useEffect(()=>{if(chartContainer&&chartContainer.current){Chart.controllers.lineWithLine=Chart.controllers.line;Chart.controllers.lineWithLine=Chart.controllers.line.extend({draw(ease){Chart.controllers.line.prototype.draw.call(this,ease);const _this$chart=this.chart,ctx=_this$chart.ctx,tooltip=_this$chart.tooltip,scales=_this$chart.scales;if(tooltip._active&&tooltip._active[0]){const activePoint=tooltip._active[0];const _activePoint$tooltipP=activePoint.tooltipPosition(),x=_activePoint$tooltipP.x;const topY=scales['y-axis-0'].top;const bottomY=scales['y-axis-0'].bottom;ctx.save();ctx.beginPath();ctx.moveTo(x,topY);ctx.lineTo(x,bottomY);ctx.lineWidth=1;ctx.strokeStyle='rgba(0,0,0,0.1)';ctx.stroke();ctx.restore();}}});const context=chartContainer.current.getContext('2d');const newChartInstance=new Chart(context,{type:'lineWithLine',options:_objectSpread(_objectSpread({},smallLineChartOptions),{},{tooltips:{intersect:false,enabled:false,custom(tooltipModel){if(tooltipModel&&tooltipModel.dataPoints){const yLabel=tooltipModel.dataPoints[0].yLabel;const xLabel=tooltipModel.dataPoints[0].xLabel;const label=tooltipModel.body[0].lines[0].split(':')[0];changeState(\"$\".concat(addCommas(yLabel)),\"\".concat(label,\"-\").concat(xLabel));}}}}),plugins:[{afterInit(chart,_options){const yLabel=chart.data.datasets[0].data[0];const xLabel=chart.data.labels[0];const label=chart.data.datasets[0].label;changeState(\"$\".concat(addCommas(yLabel)),\"\".concat(label,\"-\").concat(xLabel));}}],data});setChartInstance(newChartInstance);}},[chartContainer,data]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",{className:\"lead color-theme-1 mb-1 value\"},currentValue),/*#__PURE__*/React.createElement(\"p\",{className:\"mb-0 label text-small\"},currentLabel)),/*#__PURE__*/React.createElement(\"div\",{className:\"chart\"},/*#__PURE__*/React.createElement(\"canvas\",{ref:chartContainer})));};export default Scatter;","map":{"version":3,"sources":["D:/Shimyon/Emoiss/RiteshBhai/cdzb/chargezone/react-front-end/src/components/charts/SmallLine.js"],"names":["React","useEffect","useRef","useState","Chart","smallLineChartOptions","addCommas","nStr","x","split","x1","x2","length","rgx","test","replace","Scatter","data","chartContainer","setChartInstance","currentValue","setCurrentValue","currentLabel","setCurrentLabel","changeState","yLabel","xLabel","current","controllers","lineWithLine","line","extend","draw","ease","prototype","call","chart","ctx","tooltip","scales","_active","activePoint","tooltipPosition","topY","top","bottomY","bottom","save","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","restore","context","getContext","newChartInstance","type","options","tooltips","intersect","enabled","custom","tooltipModel","dataPoints","label","body","lines","plugins","afterInit","_options","datasets","labels"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-param-reassign */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js';\n\nimport { smallLineChartOptions } from './config';\n\nconst addCommas = (nStr) => {\n  nStr += '';\n  const x = nStr.split('.');\n  let x1 = x[0];\n  const x2 = x.length > 1 ? `.${x[1]}` : '';\n  const rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, '$1,$2');\n  }\n  return x1 + x2;\n};\n\nconst Scatter = ({ data }) => {\n  const chartContainer = useRef(null);\n  const [, setChartInstance] = useState(null);\n  const [currentValue, setCurrentValue] = useState('');\n  const [currentLabel, setCurrentLabel] = useState('');\n\n  const changeState = (yLabel, xLabel) => {\n    setCurrentValue(yLabel);\n    setCurrentLabel(xLabel);\n  };\n\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      Chart.controllers.lineWithLine = Chart.controllers.line;\n      Chart.controllers.lineWithLine = Chart.controllers.line.extend({\n        draw(ease) {\n          Chart.controllers.line.prototype.draw.call(this, ease);\n          const {\n            chart: { ctx, tooltip, scales },\n          } = this;\n\n          if (tooltip._active && tooltip._active[0]) {\n            const activePoint = tooltip._active[0];\n            const { x } = activePoint.tooltipPosition();\n            const topY = scales['y-axis-0'].top;\n            const bottomY = scales['y-axis-0'].bottom;\n            ctx.save();\n            ctx.beginPath();\n            ctx.moveTo(x, topY);\n            ctx.lineTo(x, bottomY);\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = 'rgba(0,0,0,0.1)';\n            ctx.stroke();\n            ctx.restore();\n          }\n        },\n      });\n      const context = chartContainer.current.getContext('2d');\n      const newChartInstance = new Chart(context, {\n        type: 'lineWithLine',\n        options: {\n          ...smallLineChartOptions,\n          tooltips: {\n            intersect: false,\n            enabled: false,\n            custom(tooltipModel) {\n              if (tooltipModel && tooltipModel.dataPoints) {\n                const { yLabel } = tooltipModel.dataPoints[0];\n                const { xLabel } = tooltipModel.dataPoints[0];\n                const label = tooltipModel.body[0].lines[0].split(':')[0];\n                changeState(`$${addCommas(yLabel)}`, `${label}-${xLabel}`);\n              }\n            },\n          },\n        },\n        plugins: [\n          {\n            afterInit(chart, _options) {\n              const yLabel = chart.data.datasets[0].data[0];\n              const xLabel = chart.data.labels[0];\n              const { label } = chart.data.datasets[0];\n              changeState(`$${addCommas(yLabel)}`, `${label}-${xLabel}`);\n            },\n          },\n        ],\n        data,\n      });\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer, data]);\n\n  return (\n    <>\n      <div>\n        <p className=\"lead color-theme-1 mb-1 value\">{currentValue}</p>\n        <p className=\"mb-0 label text-small\">{currentLabel}</p>\n      </div>\n      <div className=\"chart\">\n        <canvas ref={chartContainer} />\n      </div>\n    </>\n  );\n};\n\nexport default Scatter;\n"]},"metadata":{},"sourceType":"module"}