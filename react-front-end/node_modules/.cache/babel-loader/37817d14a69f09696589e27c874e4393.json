{"ast":null,"code":"import _slicedToArray from\"D:\\\\Shimyon\\\\Emoiss\\\\RiteshBhai\\\\cdzb\\\\chargezone\\\\react-front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Row,Card,CardTitle,Label,FormGroup,Button}from'reactstrap';import{NavLink}from'react-router-dom';import{Formik,Form,Field}from'formik';import{connect}from'react-redux';import{Colxx}from'../../components/common/CustomBootstrap';import IntlMessages from'../../helpers/IntlMessages';import{forgotPassword}from'../../redux/actions';import{NotificationManager}from'../../components/common/react-notifications';const validateEmail=value=>{let error;if(!value){error='Please enter your email address';}else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)){error='Invalid email address';}return error;};const ForgotPassword=({history,forgotUserMail,loading,error,forgotPasswordAction})=>{const _useState=useState('demo@coloredstrategies.com'),_useState2=_slicedToArray(_useState,1),email=_useState2[0];const onForgotPassword=values=>{if(!loading){if(values.email!==''){forgotPasswordAction(values,history);}}};useEffect(()=>{if(error){NotificationManager.warning(error,'Forgot Password Error',3000,null,null,'');}else if(!loading&&forgotUserMail==='success')NotificationManager.success('Please check your email.','Forgot Password Success',3000,null,null,'');},[error,forgotUserMail,loading]);const initialValues={email};return/*#__PURE__*/React.createElement(Row,{className:\"h-100\"},/*#__PURE__*/React.createElement(Colxx,{xxs:\"12\",md:\"10\",className:\"mx-auto my-auto\"},/*#__PURE__*/React.createElement(Card,{className:\"auth-card\"},/*#__PURE__*/React.createElement(\"div\",{className:\"position-relative image-side \"},/*#__PURE__*/React.createElement(\"p\",{className:\"text-white h2\"},\"MAGIC IS IN THE DETAILS\"),/*#__PURE__*/React.createElement(\"p\",{className:\"white mb-0\"},\"Please use your e-mail to reset your password. \",/*#__PURE__*/React.createElement(\"br\",null),\"If you are not a member, please\",' ',/*#__PURE__*/React.createElement(NavLink,{to:\"/user/register\",className:\"white\"},\"register\"),\".\")),/*#__PURE__*/React.createElement(\"div\",{className:\"form-side\"},/*#__PURE__*/React.createElement(NavLink,{to:\"/\",className:\"white\"},/*#__PURE__*/React.createElement(\"span\",{className:\"logo-single\"})),/*#__PURE__*/React.createElement(CardTitle,{className:\"mb-4\"},/*#__PURE__*/React.createElement(IntlMessages,{id:\"user.forgot-password\"})),/*#__PURE__*/React.createElement(Formik,{initialValues:initialValues,onSubmit:onForgotPassword},({errors,touched})=>/*#__PURE__*/React.createElement(Form,{className:\"av-tooltip tooltip-label-bottom\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"form-group has-float-label\"},/*#__PURE__*/React.createElement(Label,null,/*#__PURE__*/React.createElement(IntlMessages,{id:\"user.email\"})),/*#__PURE__*/React.createElement(Field,{className:\"form-control\",name:\"email\",validate:validateEmail}),errors.email&&touched.email&&/*#__PURE__*/React.createElement(\"div\",{className:\"invalid-feedback d-block\"},errors.email)),/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex justify-content-between align-items-center\"},/*#__PURE__*/React.createElement(NavLink,{to:\"/user/forgot-password\"},/*#__PURE__*/React.createElement(IntlMessages,{id:\"user.forgot-password-question\"})),/*#__PURE__*/React.createElement(Button,{color:\"primary\",className:\"btn-shadow btn-multiple-state \".concat(loading?'show-spinner':''),size:\"lg\"},/*#__PURE__*/React.createElement(\"span\",{className:\"spinner d-inline-block\"},/*#__PURE__*/React.createElement(\"span\",{className:\"bounce1\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"bounce2\"}),/*#__PURE__*/React.createElement(\"span\",{className:\"bounce3\"})),/*#__PURE__*/React.createElement(\"span\",{className:\"label\"},/*#__PURE__*/React.createElement(IntlMessages,{id:\"user.reset-password-button\"}))))))))));};const mapStateToProps=({authUser})=>{const forgotUserMail=authUser.forgotUserMail,loading=authUser.loading,error=authUser.error;return{forgotUserMail,loading,error};};export default connect(mapStateToProps,{forgotPasswordAction:forgotPassword})(ForgotPassword);","map":{"version":3,"sources":["D:/Shimyon/Emoiss/RiteshBhai/cdzb/chargezone/react-front-end/src/views/user/forgot-password.js"],"names":["React","useState","useEffect","Row","Card","CardTitle","Label","FormGroup","Button","NavLink","Formik","Form","Field","connect","Colxx","IntlMessages","forgotPassword","NotificationManager","validateEmail","value","error","test","ForgotPassword","history","forgotUserMail","loading","forgotPasswordAction","email","onForgotPassword","values","warning","success","initialValues","errors","touched","mapStateToProps","authUser"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Row, Card, CardTitle, Label, FormGroup, Button } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport { connect } from 'react-redux';\nimport { Colxx } from '../../components/common/CustomBootstrap';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { forgotPassword } from '../../redux/actions';\nimport { NotificationManager } from '../../components/common/react-notifications';\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst ForgotPassword = ({\n  history,\n  forgotUserMail,\n  loading,\n  error,\n  forgotPasswordAction,\n}) => {\n  const [email] = useState('demo@coloredstrategies.com');\n\n  const onForgotPassword = (values) => {\n    if (!loading) {\n      if (values.email !== '') {\n        forgotPasswordAction(values, history);\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (error) {\n      NotificationManager.warning(\n        error,\n        'Forgot Password Error',\n        3000,\n        null,\n        null,\n        ''\n      );\n    } else if (!loading && forgotUserMail === 'success')\n      NotificationManager.success(\n        'Please check your email.',\n        'Forgot Password Success',\n        3000,\n        null,\n        null,\n        ''\n      );\n  }, [error, forgotUserMail, loading]);\n\n  const initialValues = { email };\n\n  return (\n    <Row className=\"h-100\">\n      <Colxx xxs=\"12\" md=\"10\" className=\"mx-auto my-auto\">\n        <Card className=\"auth-card\">\n          <div className=\"position-relative image-side \">\n            <p className=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\n            <p className=\"white mb-0\">\n              Please use your e-mail to reset your password. <br />\n              If you are not a member, please{' '}\n              <NavLink to=\"/user/register\" className=\"white\">\n                register\n              </NavLink>\n              .\n            </p>\n          </div>\n          <div className=\"form-side\">\n            <NavLink to=\"/\" className=\"white\">\n              <span className=\"logo-single\" />\n            </NavLink>\n            <CardTitle className=\"mb-4\">\n              <IntlMessages id=\"user.forgot-password\" />\n            </CardTitle>\n\n            <Formik initialValues={initialValues} onSubmit={onForgotPassword}>\n              {({ errors, touched }) => (\n                <Form className=\"av-tooltip tooltip-label-bottom\">\n                  <FormGroup className=\"form-group has-float-label\">\n                    <Label>\n                      <IntlMessages id=\"user.email\" />\n                    </Label>\n                    <Field\n                      className=\"form-control\"\n                      name=\"email\"\n                      validate={validateEmail}\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"invalid-feedback d-block\">\n                        {errors.email}\n                      </div>\n                    )}\n                  </FormGroup>\n\n                  <div className=\"d-flex justify-content-between align-items-center\">\n                    <NavLink to=\"/user/forgot-password\">\n                      <IntlMessages id=\"user.forgot-password-question\" />\n                    </NavLink>\n                    <Button\n                      color=\"primary\"\n                      className={`btn-shadow btn-multiple-state ${\n                        loading ? 'show-spinner' : ''\n                      }`}\n                      size=\"lg\"\n                    >\n                      <span className=\"spinner d-inline-block\">\n                        <span className=\"bounce1\" />\n                        <span className=\"bounce2\" />\n                        <span className=\"bounce3\" />\n                      </span>\n                      <span className=\"label\">\n                        <IntlMessages id=\"user.reset-password-button\" />\n                      </span>\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\n\nconst mapStateToProps = ({ authUser }) => {\n  const { forgotUserMail, loading, error } = authUser;\n  return { forgotUserMail, loading, error };\n};\n\nexport default connect(mapStateToProps, {\n  forgotPasswordAction: forgotPassword,\n})(ForgotPassword);\n"]},"metadata":{},"sourceType":"module"}