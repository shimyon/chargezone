{"ast":null,"code":"import { ThemeColors } from '../../helpers/ThemeColors';\nexport const chartTooltip = {\n  backgroundColor: ThemeColors().foregroundColor,\n  titleFontColor: ThemeColors().primaryColor,\n  borderColor: ThemeColors().separatorColor,\n  borderWidth: 0.5,\n  bodyFontColor: ThemeColors().primaryColor,\n  bodySpacing: 10,\n  xPadding: 15,\n  yPadding: 15,\n  cornerRadius: 0.15\n};\nexport const centerTextPlugin = {\n  afterDatasetsUpdate(chart) {},\n\n  beforeDraw(chart) {\n    const width = chart.chartArea.right;\n    const height = chart.chartArea.bottom;\n    const ctx = chart.chart.ctx;\n    ctx.restore();\n    let activeLabel = chart.data.labels[0];\n    let activeValue = chart.data.datasets[0].data[0];\n    let dataset = chart.data.datasets[0];\n\n    let meta = dataset._meta[Object.keys(dataset._meta)[0]];\n\n    let _meta = meta,\n        total = _meta.total;\n    let newtotal = chart.data.datasets[0].data ? chart.data.datasets[0].data.reduce((a, b) => a + b) : total;\n    let activePercentage = parseFloat((activeValue / newtotal * 100).toFixed(1));\n    activePercentage = chart.legend.legendItems[0].hidden ? 0 : activePercentage;\n\n    if (chart.pointAvailable) {\n      activeLabel = chart.data.labels[chart.pointIndex];\n      activeValue = chart.data.datasets[chart.pointDataIndex].data[chart.pointIndex];\n      dataset = chart.data.datasets[chart.pointDataIndex];\n      meta = dataset._meta[Object.keys(dataset._meta)[0]];\n      total = chart.data.datasets[0].data ? chart.data.datasets[0].data.reduce((a, b) => a + b) : meta.total;\n      activePercentage = parseFloat((activeValue / total * 100).toFixed(1));\n      activePercentage = chart.legend.legendItems[chart.pointIndex].hidden ? 0 : activePercentage;\n    }\n\n    ctx.font = '36px Nunito, sans-serif';\n    ctx.fillStyle = ThemeColors().primaryColor;\n    ctx.textBaseline = 'middle';\n    const text = \"\".concat(activePercentage, \"%\");\n    const textX = Math.round((width - ctx.measureText(text).width) / 2);\n    const textY = height / 2;\n    ctx.fillText(text, textX, textY);\n    ctx.font = '14px Nunito, sans-serif';\n    ctx.textBaseline = 'middle';\n    const text2 = activeLabel;\n    const textX2 = Math.round((width - ctx.measureText(text2).width) / 2);\n    const textY2 = height / 2 - 30;\n    ctx.fillText(text2, textX2, textY2);\n    ctx.save();\n  },\n\n  beforeEvent(chart, event, options) {\n    const firstPoint = chart.getElementAtEvent(event)[0];\n\n    if (firstPoint) {\n      chart.pointIndex = firstPoint._index;\n      chart.pointDataIndex = firstPoint._datasetIndex;\n      chart.pointAvailable = true;\n    }\n  }\n\n};","map":{"version":3,"sources":["D:/Shimyon/Emoiss/RiteshBhai/cdzb/chargezone/react-front-end/src/components/charts/util.js"],"names":["ThemeColors","chartTooltip","backgroundColor","foregroundColor","titleFontColor","primaryColor","borderColor","separatorColor","borderWidth","bodyFontColor","bodySpacing","xPadding","yPadding","cornerRadius","centerTextPlugin","afterDatasetsUpdate","chart","beforeDraw","width","chartArea","right","height","bottom","ctx","restore","activeLabel","data","labels","activeValue","datasets","dataset","meta","_meta","Object","keys","total","newtotal","reduce","a","b","activePercentage","parseFloat","toFixed","legend","legendItems","hidden","pointAvailable","pointIndex","pointDataIndex","font","fillStyle","textBaseline","text","textX","Math","round","measureText","textY","fillText","text2","textX2","textY2","save","beforeEvent","event","options","firstPoint","getElementAtEvent","_index","_datasetIndex"],"mappings":"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","sourcesContent":["import { ThemeColors } from '../../helpers/ThemeColors';\n\nexport const chartTooltip = {\n  backgroundColor: ThemeColors().foregroundColor,\n  titleFontColor: ThemeColors().primaryColor,\n  borderColor: ThemeColors().separatorColor,\n  borderWidth: 0.5,\n  bodyFontColor: ThemeColors().primaryColor,\n  bodySpacing: 10,\n  xPadding: 15,\n  yPadding: 15,\n  cornerRadius: 0.15,\n};\n\nexport const centerTextPlugin = {\n  afterDatasetsUpdate(chart) {},\n  beforeDraw(chart) {\n    const width = chart.chartArea.right;\n    const height = chart.chartArea.bottom;\n    const { ctx } = chart.chart;\n    ctx.restore();\n\n    let activeLabel = chart.data.labels[0];\n    let activeValue = chart.data.datasets[0].data[0];\n    let dataset = chart.data.datasets[0];\n    let meta = dataset._meta[Object.keys(dataset._meta)[0]];\n    let { total } = meta;\n\n    let newtotal = (chart.data.datasets[0].data)?chart.data.datasets[0].data.reduce((a, b) => a+b):total;\n\n    let activePercentage = parseFloat(((activeValue / newtotal) * 100).toFixed(1));\n    activePercentage = chart.legend.legendItems[0].hidden\n      ? 0\n      : activePercentage;\n    if (chart.pointAvailable) {\n      activeLabel = chart.data.labels[chart.pointIndex];\n      activeValue =\n        chart.data.datasets[chart.pointDataIndex].data[chart.pointIndex];\n\n      dataset = chart.data.datasets[chart.pointDataIndex];\n      meta = dataset._meta[Object.keys(dataset._meta)[0]];\n      total = (chart.data.datasets[0].data)?chart.data.datasets[0].data.reduce((a, b) => a+b):meta.total;\n      activePercentage = parseFloat(((activeValue / total) * 100).toFixed(1));\n      activePercentage = chart.legend.legendItems[chart.pointIndex].hidden\n        ? 0\n        : activePercentage;\n    }\n\n    ctx.font = '36px Nunito, sans-serif';\n    ctx.fillStyle = ThemeColors().primaryColor;\n    ctx.textBaseline = 'middle';\n\n    const text = `${activePercentage}%`;\n    const textX = Math.round((width - ctx.measureText(text).width) / 2);\n    const textY = height / 2;\n    ctx.fillText(text, textX, textY);\n\n    ctx.font = '14px Nunito, sans-serif';\n    ctx.textBaseline = 'middle';\n\n    const text2 = activeLabel;\n    const textX2 = Math.round((width - ctx.measureText(text2).width) / 2);\n    const textY2 = height / 2 - 30;\n    ctx.fillText(text2, textX2, textY2);\n\n    ctx.save();\n  },\n  beforeEvent(chart, event, options) {\n    const firstPoint = chart.getElementAtEvent(event)[0];\n\n    if (firstPoint) {\n      chart.pointIndex = firstPoint._index;\n      chart.pointDataIndex = firstPoint._datasetIndex;\n      chart.pointAvailable = true;\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}