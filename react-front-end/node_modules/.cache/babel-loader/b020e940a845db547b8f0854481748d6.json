{"ast":null,"code":"import React from'react';import{Card,CardBody,CardTitle,Progress,Spinner}from'reactstrap';import IntlMessages from'../../../../helpers/IntlMessages';const BatteryStatusChart=({cardClass='dashboard-donut-chart'})=>{return/*#__PURE__*/React.createElement(Card,{className:cardClass},/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(CardTitle,null,/*#__PURE__*/React.createElement(IntlMessages,{id:\"dashboard.batteries\"})),loading3&&/*#__PURE__*/React.createElement(\"div\",{className:\"text-center pt-3\"},/*#__PURE__*/React.createElement(Spinner,{color:\"primary\",className:\"mb-1\"}),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(IntlMessages,{id:\"dashboard.loading\"}))),!loading3&&!blankMsg&&data.map((s,index)=>{return/*#__PURE__*/React.createElement(\"div\",{key:index,className:\"mb-4\"},/*#__PURE__*/React.createElement(\"p\",{className:\"mb-2\"},s.title,/*#__PURE__*/React.createElement(\"span\",{className:\"float-right text-muted\"},s.status,\"/\",s.total)),/*#__PURE__*/React.createElement(Progress,{value:s.status/s.total*100}));}),blankMsg&&data1.map((s,index)=>{return/*#__PURE__*/React.createElement(\"div\",{key:index,className:\"mb-4\"},/*#__PURE__*/React.createElement(\"p\",{className:\"mb-2\"},s.title,/*#__PURE__*/React.createElement(\"span\",{className:\"float-right text-muted\"},s.status,\"/\",s.total)),/*#__PURE__*/React.createElement(Progress,{value:s.status/s.total*100}));})));};const setBlankMsg=value=>{blankMsg=value;};let blankMsg=false;const data=[{title:'In Charge',total:0,status:0},{title:'Charged',total:0,status:0},{title:'Discharged',total:0,status:0},{title:'Faulty',total:0,status:0},{title:'Out',total:0,status:0}];const data1=[{title:'In Charge',total:0,status:0},{title:'Charged',total:0,status:0},{title:'Discharged',total:0,status:0},{title:'Faulty',total:0,status:0},{title:'Out',total:0,status:0}];const setBatteryChartData=(index,total,status)=>{data[index].status=status;data[index].total=total;setBlankMsg(false);if(data[0].total==0&&data[1].total==0&&data[2].total==0&&data[3].total==0&&data[4].total==0){setBlankMsg(true);}};let loading3=false;const setLoading3=value=>{loading3=value;};export{BatteryStatusChart,setBatteryChartData,setLoading3};","map":{"version":3,"sources":["D:/Shimyon/Emoiss/RiteshBhai/cdzb/chargezone/react-front-end/src/views/app/dashboard/operator/BatteryStatusChart.js"],"names":["React","Card","CardBody","CardTitle","Progress","Spinner","IntlMessages","BatteryStatusChart","cardClass","loading3","blankMsg","data","map","s","index","title","status","total","data1","setBlankMsg","value","setBatteryChartData","setLoading3"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Card, CardBody, CardTitle ,Progress,Spinner} from 'reactstrap';\n\nimport IntlMessages from '../../../../helpers/IntlMessages';\n\n\nconst BatteryStatusChart =  ({ cardClass = 'dashboard-donut-chart' }) => {\n  return (\n    <Card className={cardClass}>\n      <CardBody>\n        <CardTitle>\n          <IntlMessages id=\"dashboard.batteries\" />\n        </CardTitle>\n        {loading3 && (\n                  <div className=\"text-center pt-3\">\n                    <Spinner color=\"primary\" className=\"mb-1\" />\n                    <p>\n                      <IntlMessages id=\"dashboard.loading\" />\n                    </p>\n                  </div>\n                ) }\n        {(!loading3 && !blankMsg) && data.map((s, index) => {\n          return (\n            <div key={index} className=\"mb-4\">\n              <p className=\"mb-2\">\n                {s.title}\n                <span className=\"float-right text-muted\">\n                  {s.status}/{s.total}\n                </span>\n              </p>\n              <Progress value={(s.status / s.total) * 100} />\n            </div>\n          );\n        })}\n\n{(blankMsg) && data1.map((s, index) => {\n          return (\n            <div key={index} className=\"mb-4\">\n              <p className=\"mb-2\">\n                {s.title}\n                <span className=\"float-right text-muted\">\n                  {s.status}/{s.total}\n                </span>\n              </p>\n              <Progress value={(s.status / s.total) * 100} />\n            </div>\n          );\n        })}\n\n        \n        \n      </CardBody>\n    </Card>\n  );\n};\nconst  setBlankMsg = (value) => {blankMsg=value};\nlet blankMsg=false;\nconst data = [\n  {\n    title: 'In Charge',\n    total: 0,\n    status: 0,\n  },\n  {\n    title: 'Charged',\n    total: 0,\n    status: 0,\n  },\n  {\n    title: 'Discharged',\n    total: 0,\n    status: 0,\n    \n  },\n  {\n    title: 'Faulty',\n    total: 0,\n    status: 0,\n  },\n  {\n    title: 'Out',\n    total: 0,\n    status: 0,\n  },\n \n];\nconst data1 = [\n  {\n    title: 'In Charge',\n    total: 0,\n    status: 0,\n  },\n  {\n    title: 'Charged',\n    total: 0,\n    status: 0,\n  },\n  {\n    title: 'Discharged',\n    total: 0,\n    status: 0,\n    \n  },\n  {\n    title: 'Faulty',\n    total: 0,\n    status: 0,\n  },\n  {\n    title: 'Out',\n    total: 0,\n    status: 0,\n  },\n \n];\n\nconst setBatteryChartData = (index,total,status) => {data[index].status=status;data[index].total=total;\n\n  setBlankMsg(false);\n if(data[0].total==0 && data[1].total==0 && data[2].total==0 && data[3].total==0 && data[4].total==0)\n {\n   setBlankMsg(true);\n   \n }\n};\nlet loading3= false;\nconst  setLoading3 = (value) => {loading3=value};\n\nexport  {BatteryStatusChart,setBatteryChartData,setLoading3};\n"]},"metadata":{},"sourceType":"module"}