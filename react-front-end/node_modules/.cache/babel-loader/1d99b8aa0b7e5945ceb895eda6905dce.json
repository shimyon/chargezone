{"ast":null,"code":"import _slicedToArray from\"D:\\\\Shimyon\\\\Emoiss\\\\RiteshBhai\\\\cdzb\\\\chargezone-frontend-development\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";/* eslint-disable prefer-rest-params */import React,{useEffect,useRef,useState}from'react';import{Chart}from'chart.js';import{areaChartOptions}from'./config';const Area=({data,shadow=false})=>{const chartContainer=useRef(null);const _useState=useState(null),_useState2=_slicedToArray(_useState,2),setChartInstance=_useState2[1];useEffect(()=>{if(chartContainer&&chartContainer.current){if(shadow){Chart.defaults.lineWithShadow=Chart.defaults.line;Chart.controllers.lineWithShadow=Chart.controllers.line.extend({draw(ease){Chart.controllers.line.prototype.draw.call(this,ease);const ctx=this.chart.ctx;ctx.save();ctx.shadowColor='rgba(0,0,0,0.15)';ctx.shadowBlur=10;ctx.shadowOffsetX=0;ctx.shadowOffsetY=10;ctx.responsive=true;ctx.stroke();Chart.controllers.line.prototype.draw.apply(this,arguments);ctx.restore();}});}const context=chartContainer.current.getContext('2d');const newChartInstance=new Chart(context,{type:shadow?'lineWithShadow':'line',options:areaChartOptions,data});setChartInstance(newChartInstance);}},[chartContainer,data,shadow]);return/*#__PURE__*/React.createElement(\"canvas\",{ref:chartContainer});};export default Area;","map":{"version":3,"sources":["D:/Shimyon/Emoiss/RiteshBhai/cdzb/chargezone-frontend-development/src/components/charts/Area.js"],"names":["React","useEffect","useRef","useState","Chart","areaChartOptions","Area","data","shadow","chartContainer","setChartInstance","current","defaults","lineWithShadow","line","controllers","extend","draw","ease","prototype","call","ctx","chart","save","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","responsive","stroke","apply","arguments","restore","context","getContext","newChartInstance","type","options"],"mappings":"kMAAA,uCACA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,CAAmCC,QAAnC,KAAmD,OAAnD,CACA,OAASC,KAAT,KAAsB,UAAtB,CAEA,OAASC,gBAAT,KAAiC,UAAjC,CAEA,KAAMC,CAAAA,IAAI,CAAG,CAAC,CAAEC,IAAF,CAAQC,MAAM,CAAG,KAAjB,CAAD,GAA8B,CACzC,KAAMC,CAAAA,cAAc,CAAGP,MAAM,CAAC,IAAD,CAA7B,CADyC,gBAEZC,QAAQ,CAAC,IAAD,CAFI,wCAEhCO,gBAFgC,eAIzCT,SAAS,CAAC,IAAM,CACd,GAAIQ,cAAc,EAAIA,cAAc,CAACE,OAArC,CAA8C,CAC5C,GAAIH,MAAJ,CAAY,CACVJ,KAAK,CAACQ,QAAN,CAAeC,cAAf,CAAgCT,KAAK,CAACQ,QAAN,CAAeE,IAA/C,CACAV,KAAK,CAACW,WAAN,CAAkBF,cAAlB,CAAmCT,KAAK,CAACW,WAAN,CAAkBD,IAAlB,CAAuBE,MAAvB,CAA8B,CAC/DC,IAAI,CAACC,IAAD,CAAO,CACTd,KAAK,CAACW,WAAN,CAAkBD,IAAlB,CAAuBK,SAAvB,CAAiCF,IAAjC,CAAsCG,IAAtC,CAA2C,IAA3C,CAAiDF,IAAjD,EADS,KAGEG,CAAAA,GAHF,CAIL,IAJK,CAGPC,KAHO,CAGED,GAHF,CAKTA,GAAG,CAACE,IAAJ,GACAF,GAAG,CAACG,WAAJ,CAAkB,kBAAlB,CACAH,GAAG,CAACI,UAAJ,CAAiB,EAAjB,CACAJ,GAAG,CAACK,aAAJ,CAAoB,CAApB,CACAL,GAAG,CAACM,aAAJ,CAAoB,EAApB,CACAN,GAAG,CAACO,UAAJ,CAAiB,IAAjB,CACAP,GAAG,CAACQ,MAAJ,GACAzB,KAAK,CAACW,WAAN,CAAkBD,IAAlB,CAAuBK,SAAvB,CAAiCF,IAAjC,CAAsCa,KAAtC,CAA4C,IAA5C,CAAkDC,SAAlD,EACAV,GAAG,CAACW,OAAJ,GACD,CAf8D,CAA9B,CAAnC,CAiBD,CACD,KAAMC,CAAAA,OAAO,CAAGxB,cAAc,CAACE,OAAf,CAAuBuB,UAAvB,CAAkC,IAAlC,CAAhB,CACA,KAAMC,CAAAA,gBAAgB,CAAG,GAAI/B,CAAAA,KAAJ,CAAU6B,OAAV,CAAmB,CAC1CG,IAAI,CAAE5B,MAAM,CAAG,gBAAH,CAAsB,MADQ,CAE1C6B,OAAO,CAAEhC,gBAFiC,CAG1CE,IAH0C,CAAnB,CAAzB,CAKAG,gBAAgB,CAACyB,gBAAD,CAAhB,CACD,CACF,CA9BQ,CA8BN,CAAC1B,cAAD,CAAiBF,IAAjB,CAAuBC,MAAvB,CA9BM,CAAT,CAgCA,mBAAO,8BAAQ,GAAG,CAAEC,cAAb,EAAP,CACD,CArCD,CAuCA,cAAeH,CAAAA,IAAf","sourcesContent":["/* eslint-disable prefer-rest-params */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js';\n\nimport { areaChartOptions } from './config';\n\nconst Area = ({ data, shadow = false }) => {\n  const chartContainer = useRef(null);\n  const [, setChartInstance] = useState(null);\n\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      if (shadow) {\n        Chart.defaults.lineWithShadow = Chart.defaults.line;\n        Chart.controllers.lineWithShadow = Chart.controllers.line.extend({\n          draw(ease) {\n            Chart.controllers.line.prototype.draw.call(this, ease);\n            const {\n              chart: { ctx },\n            } = this;\n            ctx.save();\n            ctx.shadowColor = 'rgba(0,0,0,0.15)';\n            ctx.shadowBlur = 10;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 10;\n            ctx.responsive = true;\n            ctx.stroke();\n            Chart.controllers.line.prototype.draw.apply(this, arguments);\n            ctx.restore();\n          },\n        });\n      }\n      const context = chartContainer.current.getContext('2d');\n      const newChartInstance = new Chart(context, {\n        type: shadow ? 'lineWithShadow' : 'line',\n        options: areaChartOptions,\n        data,\n      });\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer, data, shadow]);\n\n  return <canvas ref={chartContainer} />;\n};\n\nexport default Area;\n"]},"metadata":{},"sourceType":"module"}