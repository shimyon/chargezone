{"ast":null,"code":"import{createStore,applyMiddleware,compose}from'redux';import createSagaMiddleware from'redux-saga';import reducers from'./reducers';import sagas from'./sagas';const sagaMiddleware=createSagaMiddleware();const middlewares=[sagaMiddleware];export function configureStore(initialState){const store=createStore(reducers,initialState,compose(applyMiddleware(...middlewares)));sagaMiddleware.run(sagas);if(module.hot){module.hot.accept('./reducers',()=>{const nextRootReducer=require('./reducers');store.replaceReducer(nextRootReducer);});}return store;}","map":{"version":3,"sources":["D:/Shimyon/Emoiss/RiteshBhai/cdzb/chargezone-frontend-development/src/redux/store.js"],"names":["createStore","applyMiddleware","compose","createSagaMiddleware","reducers","sagas","sagaMiddleware","middlewares","configureStore","initialState","store","run","module","hot","accept","nextRootReducer","require","replaceReducer"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,CAAuCC,OAAvC,KAAsD,OAAtD,CACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CAEA,KAAMC,CAAAA,cAAc,CAAGH,oBAAoB,EAA3C,CAEA,KAAMI,CAAAA,WAAW,CAAG,CAACD,cAAD,CAApB,CAEA,MAAO,SAASE,CAAAA,cAAT,CAAwBC,YAAxB,CAAsC,CAC3C,KAAMC,CAAAA,KAAK,CAAGV,WAAW,CACvBI,QADuB,CAEvBK,YAFuB,CAGvBP,OAAO,CAACD,eAAe,CAAC,GAAGM,WAAJ,CAAhB,CAHgB,CAAzB,CAMAD,cAAc,CAACK,GAAf,CAAmBN,KAAnB,EAEA,GAAIO,MAAM,CAACC,GAAX,CAAgB,CACdD,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,CAAgC,IAAM,CACpC,KAAMC,CAAAA,eAAe,CAAGC,OAAO,CAAC,YAAD,CAA/B,CACAN,KAAK,CAACO,cAAN,CAAqBF,eAArB,EACD,CAHD,EAID,CAED,MAAOL,CAAAA,KAAP,CACD","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n  const store = createStore(\n    reducers,\n    initialState,\n    compose(applyMiddleware(...middlewares))\n  );\n\n  sagaMiddleware.run(sagas);\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const nextRootReducer = require('./reducers');\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}