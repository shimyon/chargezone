{"ast":null,"code":"import _slicedToArray from\"D:\\\\Shimyon\\\\Emoiss\\\\RiteshBhai\\\\cdzb\\\\chargezone-frontend-development\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";/* eslint-disable prefer-rest-params */import React,{useEffect,useRef,useState}from'react';import{Chart}from'chart.js';import{barChartOptions}from'./config';const Bar=({data,shadow=false})=>{const chartContainer=useRef(null);const _useState=useState(null),_useState2=_slicedToArray(_useState,2),setChartInstance=_useState2[1];useEffect(()=>{if(chartContainer&&chartContainer.current){if(shadow){Chart.defaults.global.datasets.barWithShadow=Chart.defaults.global.datasets.bar;Chart.defaults.barWithShadow=Chart.defaults.bar;Chart.controllers.barWithShadow=Chart.controllers.bar.extend({draw(ease){Chart.controllers.bar.prototype.draw.call(this,ease);const ctx=this.chart.ctx;ctx.save();ctx.shadowColor='rgba(0,0,0,0.2)';ctx.shadowBlur=7;ctx.shadowOffsetX=5;ctx.shadowOffsetY=7;ctx.responsive=true;Chart.controllers.bar.prototype.draw.apply(this,arguments);ctx.restore();}});}const context=chartContainer.current.getContext('2d');const newChartInstance=new Chart(context,{type:shadow?'barWithShadow':'bar',options:barChartOptions,data});setChartInstance(newChartInstance);}},[chartContainer,data,shadow]);return/*#__PURE__*/React.createElement(\"canvas\",{ref:chartContainer});};export default Bar;","map":{"version":3,"sources":["D:/Shimyon/Emoiss/RiteshBhai/cdzb/chargezone-frontend-development/src/components/charts/Bar.js"],"names":["React","useEffect","useRef","useState","Chart","barChartOptions","Bar","data","shadow","chartContainer","setChartInstance","current","defaults","global","datasets","barWithShadow","bar","controllers","extend","draw","ease","prototype","call","ctx","chart","save","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","responsive","apply","arguments","restore","context","getContext","newChartInstance","type","options"],"mappings":"kMAAA,uCACA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,CAAmCC,QAAnC,KAAmD,OAAnD,CACA,OAASC,KAAT,KAAsB,UAAtB,CAEA,OAASC,eAAT,KAAgC,UAAhC,CAEA,KAAMC,CAAAA,GAAG,CAAG,CAAC,CAAEC,IAAF,CAAQC,MAAM,CAAG,KAAjB,CAAD,GAA8B,CACxC,KAAMC,CAAAA,cAAc,CAAGP,MAAM,CAAC,IAAD,CAA7B,CADwC,gBAEXC,QAAQ,CAAC,IAAD,CAFG,wCAE/BO,gBAF+B,eAIxCT,SAAS,CAAC,IAAM,CACd,GAAIQ,cAAc,EAAIA,cAAc,CAACE,OAArC,CAA8C,CAC5C,GAAIH,MAAJ,CAAY,CACVJ,KAAK,CAACQ,QAAN,CAAeC,MAAf,CAAsBC,QAAtB,CAA+BC,aAA/B,CACEX,KAAK,CAACQ,QAAN,CAAeC,MAAf,CAAsBC,QAAtB,CAA+BE,GADjC,CAEAZ,KAAK,CAACQ,QAAN,CAAeG,aAAf,CAA+BX,KAAK,CAACQ,QAAN,CAAeI,GAA9C,CACAZ,KAAK,CAACa,WAAN,CAAkBF,aAAlB,CAAkCX,KAAK,CAACa,WAAN,CAAkBD,GAAlB,CAAsBE,MAAtB,CAA6B,CAC7DC,IAAI,CAACC,IAAD,CAAO,CACThB,KAAK,CAACa,WAAN,CAAkBD,GAAlB,CAAsBK,SAAtB,CAAgCF,IAAhC,CAAqCG,IAArC,CAA0C,IAA1C,CAAgDF,IAAhD,EADS,KAGEG,CAAAA,GAHF,CAIL,IAJK,CAGPC,KAHO,CAGED,GAHF,CAKTA,GAAG,CAACE,IAAJ,GACAF,GAAG,CAACG,WAAJ,CAAkB,iBAAlB,CACAH,GAAG,CAACI,UAAJ,CAAiB,CAAjB,CACAJ,GAAG,CAACK,aAAJ,CAAoB,CAApB,CACAL,GAAG,CAACM,aAAJ,CAAoB,CAApB,CACAN,GAAG,CAACO,UAAJ,CAAiB,IAAjB,CACA1B,KAAK,CAACa,WAAN,CAAkBD,GAAlB,CAAsBK,SAAtB,CAAgCF,IAAhC,CAAqCY,KAArC,CAA2C,IAA3C,CAAiDC,SAAjD,EACAT,GAAG,CAACU,OAAJ,GACD,CAd4D,CAA7B,CAAlC,CAgBD,CACD,KAAMC,CAAAA,OAAO,CAAGzB,cAAc,CAACE,OAAf,CAAuBwB,UAAvB,CAAkC,IAAlC,CAAhB,CACA,KAAMC,CAAAA,gBAAgB,CAAG,GAAIhC,CAAAA,KAAJ,CAAU8B,OAAV,CAAmB,CAC1CG,IAAI,CAAE7B,MAAM,CAAG,eAAH,CAAqB,KADS,CAE1C8B,OAAO,CAAEjC,eAFiC,CAG1CE,IAH0C,CAAnB,CAAzB,CAKAG,gBAAgB,CAAC0B,gBAAD,CAAhB,CACD,CACF,CA/BQ,CA+BN,CAAC3B,cAAD,CAAiBF,IAAjB,CAAuBC,MAAvB,CA/BM,CAAT,CAiCA,mBAAO,8BAAQ,GAAG,CAAEC,cAAb,EAAP,CACD,CAtCD,CAwCA,cAAeH,CAAAA,GAAf","sourcesContent":["/* eslint-disable prefer-rest-params */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js';\n\nimport { barChartOptions } from './config';\n\nconst Bar = ({ data, shadow = false }) => {\n  const chartContainer = useRef(null);\n  const [, setChartInstance] = useState(null);\n\n  useEffect(() => {\n    if (chartContainer && chartContainer.current) {\n      if (shadow) {\n        Chart.defaults.global.datasets.barWithShadow =\n          Chart.defaults.global.datasets.bar;\n        Chart.defaults.barWithShadow = Chart.defaults.bar;\n        Chart.controllers.barWithShadow = Chart.controllers.bar.extend({\n          draw(ease) {\n            Chart.controllers.bar.prototype.draw.call(this, ease);\n            const {\n              chart: { ctx },\n            } = this;\n            ctx.save();\n            ctx.shadowColor = 'rgba(0,0,0,0.2)';\n            ctx.shadowBlur = 7;\n            ctx.shadowOffsetX = 5;\n            ctx.shadowOffsetY = 7;\n            ctx.responsive = true;\n            Chart.controllers.bar.prototype.draw.apply(this, arguments);\n            ctx.restore();\n          },\n        });\n      }\n      const context = chartContainer.current.getContext('2d');\n      const newChartInstance = new Chart(context, {\n        type: shadow ? 'barWithShadow' : 'bar',\n        options: barChartOptions,\n        data,\n      });\n      setChartInstance(newChartInstance);\n    }\n  }, [chartContainer, data, shadow]);\n\n  return <canvas ref={chartContainer} />;\n};\n\nexport default Bar;\n"]},"metadata":{},"sourceType":"module"}