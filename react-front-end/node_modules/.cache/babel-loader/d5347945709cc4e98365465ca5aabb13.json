{"ast":null,"code":"var _jsxFileName = \"D:\\\\Shimyon\\\\Emoiss\\\\RiteshBhai\\\\cdzb\\\\chargezone\\\\react-front-end\\\\src\\\\components\\\\charts\\\\Doughnut.js\";\n\n/* eslint-disable prefer-rest-params */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js';\nimport { centerTextPlugin } from './util';\nimport { doughnutChartOptions } from './config';\n\nconst Doughnut = ({\n  data,\n  shadow = false\n}) => {\n  const chartContainer = useRef(null); // const [, setChartInstance] = useState(null);\n\n  if (chartContainer && chartContainer.current) {\n    if (shadow) {\n      Chart.defaults.doughnutWithShadow = Chart.defaults.doughnut;\n      Chart.controllers.doughnutWithShadow = Chart.controllers.doughnut.extend({\n        draw(ease) {\n          Chart.controllers.doughnut.prototype.draw.call(this, ease);\n          const ctx = this.chart.ctx;\n          ctx.save();\n          ctx.shadowColor = 'rgba(0,0,0,0.15)';\n          ctx.shadowBlur = 10;\n          ctx.shadowOffsetX = 0;\n          ctx.shadowOffsetY = 10;\n          ctx.responsive = true;\n          Chart.controllers.doughnut.prototype.draw.apply(this, arguments);\n          ctx.restore();\n        }\n\n      });\n    }\n\n    const context = chartContainer.current.getContext('2d');\n    let newChartInstance;\n\n    if (newChartInstance) {\n      newChartInstance.destroy();\n    }\n\n    ;\n    newChartInstance = new Chart(context, {\n      type: shadow ? 'doughnutWithShadow' : 'doughnut',\n      options: doughnutChartOptions,\n      plugins: [centerTextPlugin],\n      data\n    }); // setChartInstance(newChartInstance);\n  }\n\n  return /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: chartContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Doughnut;","map":{"version":3,"sources":["D:/Shimyon/Emoiss/RiteshBhai/cdzb/chargezone/react-front-end/src/components/charts/Doughnut.js"],"names":["React","useEffect","useRef","useState","Chart","centerTextPlugin","doughnutChartOptions","Doughnut","data","shadow","chartContainer","current","defaults","doughnutWithShadow","doughnut","controllers","extend","draw","ease","prototype","call","ctx","chart","save","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","responsive","apply","arguments","restore","context","getContext","newChartInstance","destroy","type","options","plugins"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,gBAAT,QAAiC,QAAjC;AACA,SAASC,oBAAT,QAAqC,UAArC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAM,GAAG;AAAjB,CAAD,KAA8B;AAC7C,QAAMC,cAAc,GAAGR,MAAM,CAAC,IAAD,CAA7B,CAD6C,CAE7C;;AACA,MAAIQ,cAAc,IAAIA,cAAc,CAACC,OAArC,EAA8C;AAC5C,QAAIF,MAAJ,EAAY;AACVL,MAAAA,KAAK,CAACQ,QAAN,CAAeC,kBAAf,GAAoCT,KAAK,CAACQ,QAAN,CAAeE,QAAnD;AACAV,MAAAA,KAAK,CAACW,WAAN,CAAkBF,kBAAlB,GAAuCT,KAAK,CAACW,WAAN,CAAkBD,QAAlB,CAA2BE,MAA3B,CACrC;AACEC,QAAAA,IAAI,CAACC,IAAD,EAAO;AACTd,UAAAA,KAAK,CAACW,WAAN,CAAkBD,QAAlB,CAA2BK,SAA3B,CAAqCF,IAArC,CAA0CG,IAA1C,CAA+C,IAA/C,EAAqDF,IAArD;AADS,gBAGEG,GAHF,GAIL,IAJK,CAGPC,KAHO,CAGED,GAHF;AAKTA,UAAAA,GAAG,CAACE,IAAJ;AACAF,UAAAA,GAAG,CAACG,WAAJ,GAAkB,kBAAlB;AACAH,UAAAA,GAAG,CAACI,UAAJ,GAAiB,EAAjB;AACAJ,UAAAA,GAAG,CAACK,aAAJ,GAAoB,CAApB;AACAL,UAAAA,GAAG,CAACM,aAAJ,GAAoB,EAApB;AACAN,UAAAA,GAAG,CAACO,UAAJ,GAAiB,IAAjB;AACAxB,UAAAA,KAAK,CAACW,WAAN,CAAkBD,QAAlB,CAA2BK,SAA3B,CAAqCF,IAArC,CAA0CY,KAA1C,CAAgD,IAAhD,EAAsDC,SAAtD;AACAT,UAAAA,GAAG,CAACU,OAAJ;AACD;;AAdH,OADqC,CAAvC;AAkBD;;AACD,UAAMC,OAAO,GAAGtB,cAAc,CAACC,OAAf,CAAuBsB,UAAvB,CAAkC,IAAlC,CAAhB;AACA,QAAIC,gBAAJ;;AACA,QAAGA,gBAAH,EAAoB;AAACA,MAAAA,gBAAgB,CAACC,OAAjB;AAA2B;;AAAA;AAChDD,IAAAA,gBAAgB,GAAG,IAAI9B,KAAJ,CAAU4B,OAAV,EAAmB;AACpCI,MAAAA,IAAI,EAAE3B,MAAM,GAAG,oBAAH,GAA0B,UADF;AAEpC4B,MAAAA,OAAO,EAAE/B,oBAF2B;AAGpCgC,MAAAA,OAAO,EAAE,CAACjC,gBAAD,CAH2B;AAIpCG,MAAAA;AAJoC,KAAnB,CAAnB,CAzB4C,CA+B5C;AACD;;AAED,sBAAO;AAAQ,IAAA,GAAG,EAAEE,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAtCD;;AAwCA,eAAeH,QAAf","sourcesContent":["/* eslint-disable prefer-rest-params */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Chart } from 'chart.js';\n\nimport { centerTextPlugin } from './util';\nimport { doughnutChartOptions } from './config';\n\nconst Doughnut = ({ data, shadow = false }) => {\n  const chartContainer = useRef(null);\n  // const [, setChartInstance] = useState(null);\n  if (chartContainer && chartContainer.current) {\n    if (shadow) {\n      Chart.defaults.doughnutWithShadow = Chart.defaults.doughnut;\n      Chart.controllers.doughnutWithShadow = Chart.controllers.doughnut.extend(\n        {\n          draw(ease) {\n            Chart.controllers.doughnut.prototype.draw.call(this, ease);\n            const {\n              chart: { ctx },\n            } = this;\n            ctx.save();\n            ctx.shadowColor = 'rgba(0,0,0,0.15)';\n            ctx.shadowBlur = 10;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 10;\n            ctx.responsive = true;\n            Chart.controllers.doughnut.prototype.draw.apply(this, arguments);\n            ctx.restore();\n          },\n        }\n      );\n    }\n    const context = chartContainer.current.getContext('2d');\n    let newChartInstance;\n    if(newChartInstance){newChartInstance.destroy()};\n    newChartInstance = new Chart(context, {\n      type: shadow ? 'doughnutWithShadow' : 'doughnut',\n      options: doughnutChartOptions,\n      plugins: [centerTextPlugin],\n      data,\n    });\n    // setChartInstance(newChartInstance);\n  }\n\n  return <canvas ref={chartContainer} />;\n};\n\nexport default Doughnut;\n"]},"metadata":{},"sourceType":"module"}